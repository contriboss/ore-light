name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write
  packages: write

env:
  GO_VERSION: '1.25'

jobs:
  build-linux:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goarch: [amd64, arm64]

    steps:
    - uses: actions/checkout@v5

    - name: Set up Go
      uses: actions/setup-go@v6
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Install cross-compiler for ARM64
      if: matrix.goarch == 'arm64'
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu

    - name: Build Linux ${{ matrix.goarch }}
      run: |
        if [ "${{ matrix.goarch }}" = "amd64" ]; then
          CGO_ENABLED=1 GOOS=linux GOARCH=amd64 go build \
            -o ore-linux-amd64 \
            -ldflags="-s -w -X main.version=${GITHUB_REF_NAME} -X main.buildCommit=${GITHUB_SHA} -X main.buildTime=$(date -u +%Y-%m-%dT%H:%M:%SZ)" \
            ./cmd/ore
        else
          CGO_ENABLED=1 CC=aarch64-linux-gnu-gcc GOOS=linux GOARCH=arm64 go build \
            -o ore-linux-arm64 \
            -ldflags="-s -w -X main.version=${GITHUB_REF_NAME} -X main.buildCommit=${GITHUB_SHA} -X main.buildTime=$(date -u +%Y-%m-%dT%H:%M:%SZ)" \
            ./cmd/ore
        fi

    - name: Upload artifact
      uses: actions/upload-artifact@v5
      with:
        name: ore-linux-${{ matrix.goarch }}
        path: ore-linux-${{ matrix.goarch }}
        retention-days: 90

  build-macos:
    strategy:
      matrix:
        include:
          - runner: macos-15-intel
            goarch: amd64
          - runner: macos-15
            goarch: arm64

    runs-on: ${{ matrix.runner }}

    steps:
    - uses: actions/checkout@v5

    - name: Set up Go
      uses: actions/setup-go@v6
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Build macOS ${{ matrix.goarch }}
      run: |
        CGO_ENABLED=1 GOOS=darwin GOARCH=${{ matrix.goarch }} go build \
          -o ore-darwin-${{ matrix.goarch }} \
          -ldflags="-s -w -X main.version=${GITHUB_REF_NAME} -X main.buildCommit=${GITHUB_SHA} -X main.buildTime=$(date -u +%Y-%m-%dT%H:%M:%SZ)" \
          ./cmd/ore

    - name: Upload artifact
      uses: actions/upload-artifact@v5
      with:
        name: ore-darwin-${{ matrix.goarch }}
        path: ore-darwin-${{ matrix.goarch }}
        retention-days: 90

  create-release:
    needs: [build-linux, build-macos]
    runs-on: ubuntu-latest

    steps:
    - name: Download Linux AMD64
      uses: actions/download-artifact@v5
      with:
        name: ore-linux-amd64
        path: dist

    - name: Download Linux ARM64
      uses: actions/download-artifact@v5
      with:
        name: ore-linux-arm64
        path: dist

    - name: Download macOS AMD64
      uses: actions/download-artifact@v5
      with:
        name: ore-darwin-amd64
        path: dist

    - name: Download macOS ARM64
      uses: actions/download-artifact@v5
      with:
        name: ore-darwin-arm64
        path: dist

    - name: List downloaded artifacts
      run: |
        ls -la dist/
        file dist/ore-*

    - name: Create checksums
      run: |
        cd dist
        sha256sum ore-* > checksums.txt
        cat checksums.txt

    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        files: dist/*
        draft: false
        prerelease: false
        generate_release_notes: true

  build-docker:
    runs-on: ubuntu-latest
    needs: build-linux
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
