name: Multi-Platform Gem Installation

on:
  workflow_dispatch: # Manual trigger for testing
  pull_request:
    paths:
      - '.github/workflows/multi-platform.yml'
      - 'scripts/install.sh'

# Prevent concurrent runs to avoid cache conflicts
concurrency:
  group: multi-platform-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Job 1: Prepare gems (fetch and vendor once)
  prepare:
    name: Prepare Gems
    runs-on: ubuntu-latest
    env:
      GEM_HOME: ${{ github.workspace }}/test-multiplatform/vendor/bundle
      GEM_PATH: ${{ github.workspace }}/test-multiplatform/vendor/bundle

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install ore
        run: |
          curl -fsSL https://raw.githubusercontent.com/contriboss/ore-light/master/scripts/install.sh | bash
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Verify ore installation
        run: ore version

      - name: Create test Gemfile
        run: |
          mkdir -p test-multiplatform && cd test-multiplatform
          cat > Gemfile <<'EOF'
          source 'https://rubygems.org'

          gem 'rack', '~> 3.0'
          gem 'sinatra', '~> 4.0'

          # MRI-specific gems (C extensions)
          platform :mri do
            gem 'pg', '~> 1.5'
          end

          # JRuby-specific gems (Java adapters)
          platform :jruby do
            gem 'jdbc-postgres', '~> 42.0'
          end
          EOF

      - name: Generate multi-platform lockfile
        working-directory: test-multiplatform
        run: |
          ore lock \
            --add-platform x86_64-linux \
            --add-platform aarch64-linux \
            --add-platform x86_64-darwin \
            --add-platform aarch64-darwin \
            --add-platform java

      - name: Configure vendor path
        working-directory: test-multiplatform
        run: |
          cat > .ore.toml <<'EOF'
          path = "vendor/bundle"
          EOF
          echo "✅ Created .ore.toml manually"
          cat .ore.toml

      - name: Vendor gems
        working-directory: test-multiplatform
        run: |
          ore install
          echo "✅ Gems vendored to vendor/bundle"

      - name: Cache ore gem cache
        uses: actions/cache@v4
        with:
          path: ~/.cache/ore/gems
          key: ore-cache-${{ hashFiles('test-multiplatform/Gemfile.lock') }}

      - name: Cache vendored gems
        uses: actions/cache@v4
        with:
          path: test-multiplatform/vendor/bundle
          key: gems-prepare-${{ hashFiles('test-multiplatform/Gemfile.lock') }}

      - name: Upload Gemfile, lockfile, and config
        uses: actions/upload-artifact@v5
        with:
          name: gemfiles
          include-hidden-files: true
          path: |
            test-multiplatform/Gemfile
            test-multiplatform/Gemfile.lock
            test-multiplatform/.ore.toml

  # Job 2: Test on multiple platforms
  test:
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    needs: prepare
    env:
      BUNDLE_PATH: vendor/bundle
      GEM_HOME: ${{ github.workspace }}/test-multiplatform/vendor/bundle
      GEM_PATH: ${{ github.workspace }}/test-multiplatform/vendor/bundle
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: MRI on Ubuntu
            os: ubuntu-latest
            ruby: '3.4'

          - name: JRuby on Ubuntu
            os: ubuntu-latest
            ruby: 'jruby-head'

          - name: TruffleRuby on Ubuntu
            os: ubuntu-latest
            ruby: 'truffleruby-head'

          - name: MRI on macOS
            os: macos-latest
            ruby: '3.4'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download Gemfile and lockfile
        uses: actions/download-artifact@v4
        with:
          name: gemfiles
          path: test-multiplatform

      - name: Restore ore gem cache
        uses: actions/cache@v4
        with:
          path: ~/.cache/ore/gems
          key: ore-cache-${{ hashFiles('test-multiplatform/Gemfile.lock') }}

      - name: Restore vendored gems
        uses: actions/cache@v4
        with:
          path: test-multiplatform/vendor/bundle
          key: gems-prepare-${{ hashFiles('test-multiplatform/Gemfile.lock') }}

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ matrix.ruby }}

      - name: Install build dependencies (Ubuntu MRI only)
        if: runner.os == 'Linux' && matrix.ruby == '3.4'
        run: |
          sudo apt-get update -qq
          sudo apt-get install -y libpq-dev

      - name: Install build dependencies (macOS MRI only)
        if: runner.os == 'macOS' && matrix.ruby == '3.4'
        run: |
          brew install postgresql@16
          echo "/opt/homebrew/opt/postgresql@16/bin" >> $GITHUB_PATH
          echo "PKG_CONFIG_PATH=/opt/homebrew/opt/postgresql@16/lib/pkgconfig" >> $GITHUB_ENV

      - name: Install ore
        run: |
          curl -fsSL https://raw.githubusercontent.com/contriboss/ore-light/master/scripts/install.sh | bash
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Verify ore installation
        run: ore version

      - name: Debug environment and files
        working-directory: test-multiplatform
        run: |
          echo "=== Environment Variables ==="
          echo "BUNDLE_PATH: ${BUNDLE_PATH:-not set}"
          echo "GEM_HOME: ${GEM_HOME:-not set}"
          echo "GEM_PATH: ${GEM_PATH:-not set}"
          echo ""
          echo "=== Ruby Information ==="
          ruby -v
          gem env
          echo ""
          echo "=== Files in test-multiplatform ==="
          ls -la
          echo ""
          if [ -f .ore.toml ]; then
            echo "=== .ore.toml contents ==="
            cat .ore.toml
          else
            echo "❌ .ore.toml not found"
          fi
          echo ""
          echo "=== Contents of vendor/bundle ==="
          if [ -d vendor/bundle ]; then
            find vendor/bundle -type f -name "*.gemspec" | head -20
            echo "..."
            echo "Total gem files: $(find vendor/bundle -name "*.gemspec" | wc -l)"
          else
            echo "❌ vendor/bundle directory not found"
          fi

      - name: Install gems (build native extensions)
        working-directory: test-multiplatform
        run: |
          ore install --build-extensions
          echo "✅ Gems installed (native extensions built for ${{ matrix.ruby }})"

      - name: Test gem loading
        working-directory: test-multiplatform
        run: |
          ore exec ruby -e "
            require 'rack'
            require 'sinatra/base'

            puts '✅ Core gems loaded successfully!'
            puts 'Rack version: ' + Rack::VERSION
            puts 'Sinatra version: ' + Sinatra::VERSION

            # Platform-specific tests
            if RUBY_ENGINE == 'jruby'
              require 'jdbc/postgres'
              puts '✅ JRuby gems loaded successfully!'
              puts 'JDBC Postgres version: ' + Jdbc::Postgres::VERSION
            elsif RUBY_ENGINE != 'truffleruby'
              require 'pg'
              puts '✅ MRI gems loaded successfully!'
              puts 'pg version: ' + PG::VERSION
            else
              puts '✅ TruffleRuby detected (skipping platform-specific gems)'
            end
          "
