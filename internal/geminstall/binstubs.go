package geminstall

import (
	"fmt"
	"os"
	"path/filepath"
	"strings"
)

// LinkGemBinaries creates binstub wrappers for gem executables
func LinkGemBinaries(gemDir, binDir string) error {
	exeDir := filepath.Join(gemDir, "bin")
	entries, err := os.ReadDir(exeDir)
	if err != nil {
		if os.IsNotExist(err) {
			return nil
		}
		return err
	}

	// Get gem name from directory (e.g., "vendor/gems/rake-13.3.0" -> "rake-13.3.0")
	gemName := filepath.Base(gemDir)

	// Get vendor root (parent of gems directory)
	vendorRoot := filepath.Dir(filepath.Dir(gemDir))

	for _, entry := range entries {
		execName := entry.Name()
		originalExec := filepath.Join(exeDir, execName)
		binstubPath := filepath.Join(binDir, execName)

		// Create binstub wrapper script
		if err := createBinstub(binstubPath, originalExec, gemName, vendorRoot); err != nil {
			return fmt.Errorf("failed to create binstub for %s: %w", execName, err)
		}
	}

	return nil
}

// createBinstub creates a Ruby wrapper script (binstub) for a gem executable
func createBinstub(binstubPath, originalExec, gemName, vendorRoot string) error {
	execName := filepath.Base(originalExec)

	// Create binstub content - manually construct to ensure proper Ruby syntax
	var binstub strings.Builder
	binstub.WriteString("#!/usr/bin/env ruby\n")
	binstub.WriteString("# frozen_string_literal: true\n")
	binstub.WriteString("\n")
	binstub.WriteString("#\n")
	binstub.WriteString("# This file was generated by ore-light.\n")
	binstub.WriteString("#\n")
	binstub.WriteString(fmt.Sprintf("# The application '%s' is installed as part of a gem, and\n", execName))
	binstub.WriteString("# this file is here to facilitate running it.\n")
	binstub.WriteString("#\n")
	binstub.WriteString("\n")
	binstub.WriteString("# Set up gem environment for ore-light vendor directory\n")
	binstub.WriteString(fmt.Sprintf("vendor_root = \"%s\"\n", vendorRoot))
	binstub.WriteString("ENV[\"GEM_HOME\"] = vendor_root\n")
	binstub.WriteString("ENV[\"GEM_PATH\"] = vendor_root\n")
	binstub.WriteString("\n")
	binstub.WriteString("# Add all gem lib directories to load path\n")
	binstub.WriteString("gems_dir = File.join(vendor_root, \"gems\")\n")
	binstub.WriteString("if File.directory?(gems_dir)\n")
	binstub.WriteString("  Dir.glob(File.join(gems_dir, \"*\", \"lib\")).each do |lib_dir|\n")
	binstub.WriteString("    $LOAD_PATH.unshift(lib_dir) unless $LOAD_PATH.include?(lib_dir)\n")
	binstub.WriteString("  end\n")
	binstub.WriteString("end\n")
	binstub.WriteString("\n")
	binstub.WriteString("# Load the actual executable\n")
	binstub.WriteString(fmt.Sprintf("load \"%s\"\n", originalExec))

	// Write binstub file
	if err := os.WriteFile(binstubPath, []byte(binstub.String()), 0755); err != nil {
		return err
	}

	return nil
}
